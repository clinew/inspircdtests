#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

[ ca ]
default_ca	= frostsnow_net		# The default ca section

[ frostsnow_net ]
# Directory and file locations
dir		= /etc/ssl/frostsnow.net		# Where everything is kept
certs		= $dir/certs		# Where the issued certs are kept
crl_dir		= $dir/crl		# Where the issued crl are kept
new_certs_dir	= $dir/newcerts		# default place for new certs.
database	= $dir/index.txt	# database index file.
serial		= $dir/serial 		# The current serial number
RANDFILE	= $dir/private/.rand	# private random number file

# Root key and cert.
private_key	= $dir/private/key.pem # The private key
certificate	= $dir/certs/cert.pem 	# The CA certificate


# Certificate revocation lists.
crlnumber	= $dir/crlnumber	# the current crl number
					# must be commented out to leave a V1 CRL
crl		= $dir/crl/crl.pem 		# The current CRL
crl_extensions	= crl_ext
default_crl_days	= 30			# how long before next CRL

# Use better hash.
default_md 	= sha512

name_opt 	= ca_default		# Subject Name options
cert_opt 	= ca_default		# Certificate field options
default_days 	= 7200
preserve	= no			# keep passed DN ordering
policy		= policy_anything

x509_extensions	= v3_friend		# The extentions to add to the cert

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

[ req ]
# Options for the 'req' tool.
default_bits		= 4096
distinguished_name	= req_distinguished_name
string_mask		= utf8only

# Use the better hash.
default_md		= sha512

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
stateOrProvinceName		= State or Province Name (full name)
localityName			= Locality Name (eg, city)
0.organizationName		= Organization Name (eg, company)
# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
organizationalUnitName		= Organizational Unit Name (eg, section)
commonName			= Common Name (e.g. server FQDN or YOUR name)
emailAddress			= Email Address

#countryName_default		= AU
#stateOrProvinceName_default	= Some-State
#0.organizationName_default	= Internet Widgits Pty Ltd
#1.organizationName_default	= World Wide Web Pty Ltd
#organizationalUnitName_default	=

# Extensions for root CA.
[ v3_root ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:TRUE

# Old, custom PKI method, "friend-of-friend".  Repalced by AFR PKI.
[ v3_friend ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:TRUE,pathlen:0

# Old, custom PKI method, "friend-of-friend".  Repalced by AFR PKI.
[ v3_fof ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:FALSE

# Extensions for a "service" certificate.  Service certificates must be used
# in order to verify the authenticity of a particular service to the end user.
[ v3_service ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:FALSE
extendedKeyUsage = critical,serverAuth

# Extensions for a "signing" certificate.  Signing certificates are used by the
# serverice in order to invite friends and issue referrer certificates.
[ v3_signing ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:TRUE, pathlen:1
# TODO: Does this designate the certificate as for signing certificates only?
#KeyUsage = critical,keyCertSign

# Extensions for a "referrer" certificate.  Referrer certificates may used by
# friends in order to invite others (known as "referred" users) to the service.
[ v3_referrer ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:TRUE, pathlen:0

# Extensions for a "client" certificate.  Client certificates may only be used
# by users in order to authenticate to a service.  The client may either be a
# friend or referred user.
[ v3_client ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:FALSE
extendedKeyUsage = critical,clientAuth

[ crl_ext ]
authorityKeyIdentifier=keyid:always

# Test for an indirect CRL CA.
[ crl_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
keyUsage = critical,cRLSign
basicConstraints = critical,CA:FALSE

# Test for a client certificate with an indirect CRL.
[ indirect ]
#subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:FALSE
extendedKeyUsage = critical,clientAuth
crlDistributionPoints = critical,crl_ca_dp

# Distribution point for the indirect CRL CA.
[ crl_ca_dp ]
fullname = URI:http://example.com/example.crl # FIXME: Remove dummy value
CRLissuer = dirName: crl_ca_dp_dn

# DN of the indirect CRL CA.
[ crl_ca_dp_dn ]
CN=crl_ca

# Configuration for indirect CRL CA.
[ crl_conf ]
dir = .
certificate = $dir/certs/crl_ca.pem
private_key = $dir/private/crl_ca.pem
database = $dir/../signing_ca_indirectcrl/index.txt
crlnumber = $dir/../signing_ca_indirectcrl/crlnumber
default_crl_days	= 30
default_md 	= sha512

# CRL extensions or something...
[ crl_ext2 ]
authorityKeyIdentifier = keyid:always,issuer
#issuerAltName = dirName: ugh
issuingDistributionPoint = critical, @crl_idp

# Doesn't seem to help identify the CRL certificate issuer for a revoked cert,
# either.
#[ ugh ]
#CN=signing_ca_indirectcrl

# CRL Issuing Distribution Point
# FIXME: This doesn't work because... ?
#   No way to specify "Certificate Issuer" for each certificate revoked?
#   Something about CRL issuer and CA names needing to be the same?
#   http://openssl.6102.n7.nabble.com/Re-openssl-org-3097-Incorrect-revocation-status-with-indirect-CRL-td47482.html
[ crl_idp ]
fullname = URI:http://example.com/example.crl
indirectCRL = TRUE
